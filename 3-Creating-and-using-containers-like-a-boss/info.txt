docker version
docker info
docker run --name nginx-webserver -p 80:80 nginx
-> http://192.168.99.100 (nginx)

No windows quando dá ctrl+c ele continua em execução, precisando dar um 
docker stop <container_id/name>

Detached mode (inicializa o container e deixa rodando em background)
docker run -d ....

"docker run" sempre inicia um novo container
"docker start" inicia um existente que está parado

Logs do container
docker logs <container_id/name>

Para ver os processos rodando no container
docker top <container_id/name>

Para remover um container
docker rm <container_id/name>

Para filtrar uma listagem de arquivos no linux
comando | grep <nome-do-objeto>

inciando um container do nginx
docker run -d --name nginx -p 80:80 nginx

inciando um container do apache (webserver)
docker run -d --name apache-webserver -p 8080:80 httpd

inciando um container do mysql com senha aleatória
docker run -d --name mysql -p 3306:3306 -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql

Para ver a senha criada
docker logs mysql 
(ex: theeHiteir3Xoo6ooJ6chaed7oqueiv4)

Exibe os valores de metadata do container
docker inspect <container_id/name>

Mostra em tempo real a performance dos processos em execução do container
docker stats <container_id/name>

Para iniciar um container e entrar no bash dele
docker run -it --name proxy nginx bash

No caso de ubuntu, ele já entra direto no bash, sem precisa especificar no comando
docker run -it --name ubuntu ubuntu

Iniciando um container que estava parado e acessando seu terminal
"-ai" = attach + interactive
docker start -ai <container_id/name>

Para executar um comando em um container em execução
docker exec -it mysql bash (vai entrar no bash do container mysql)
Neste caso, ao sair do bash com exit, não irá encerrar o container.

Alpine não tem um bash
docker run --rm -it --name alpine1 alpine /bin/sh (ou apenas sh)

Para inspecionar o valor de determinado metadado
docker run -d -p 80:80 --name webhost nginx
docker inspect --format "{{ .NetworkSettings.IPAddress }}" webhost (no linux é aspas simples)

Networks
- showing -> docker network ls
- inspect -> docker network inspect (ajuda para saber quais containers estão nessa rede)
- create -> docker network create <nome> --driver (este último é opcional)
- attach -> docker network connect
- dettach -> docker network disconnect

Criando uma rede
docker network create my_app_net

Criado um container na rede acima criada
docker run -d --name new_nginx --network my_app_net nginx

Associando um outro container a esta rede (o container não precisa estar executando)
docker network connect my_app_net webhost

Para remover o container da rede
docker network disconnect my_app_net webhost

Criado um novo container, associando a rede existente e testando a conexão entre os containers
docker run -d --name my_nginx --network my_app_net nginx
docker exec -it my_nginx ping new_nginx
Obs.: caso não tenha o ping, para instalar basta seguir a sequência no bash:
- apt update
- apt install iputils-ping

Assignment DNS round robin test
-------------------------------
1) Criar uma rede para colocar os containers
docker network create dude
2) Crio 2 containers do elasticsearch na versão 2 associando a esta nova rede, com o alias de search
docker run -d --name elastic1 --net dude --net-alias search elasticsearch:2
docker run -d --name elastic2 --net dude --net-alias search elasticsearch:2
3) Crio um container do alpine configurado para resolver o nome "search" (DNS), da rede
docker run -d --rm --name alpine-search --net dude alpine nslookup search
4) Crio um container do centos e associo a rede criada executando uma consulta no nome "search"
docker run --rm --net dude --name centos centos curl -s search:9200
5) O comando acima irá retornar a página padrão de um dos containers do elastic (Name = "alguma coisa")
6) Caso eu execute novamente o item 4, retornarei outro container do elastico (Name = "outra coisa")
